// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id @default(uuid())
  email         String    @unique
  name          String?
  role          String    @default("USER")
  created_at    DateTime  @default(now())
  updated_at    DateTime  @updatedAt
  events        Event[]   @relation("EventCreator")
  rsvps         RSVP[]
}

model Profile {
  id            String    @id @default(cuid())
  userId        String    @unique
  user          User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  bio           String?
  phone         String?
  address       String?
  profileImage  String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
}

model Event {
  id            String    @id @default(uuid())
  title         String
  description   String
  start_date    DateTime
  end_date      DateTime
  location      String
  created_at    DateTime  @default(now())
  updated_at    DateTime  @updatedAt
  creator_id    String
  creator       User      @relation("EventCreator", fields: [creator_id], references: [id])
  rsvps         RSVP[]
  custom_fields Json?     // For additional customizable fields
  public_url    String    @unique
  is_published  Boolean   @default(false)
}

model RSVP {
  id            String    @id @default(uuid())
  event_id      String
  user_id       String
  status        String    @default("PENDING") // PENDING, CONFIRMED, CANCELLED
  created_at    DateTime  @default(now())
  updated_at    DateTime  @updatedAt
  event         Event     @relation(fields: [event_id], references: [id])
  user          User      @relation(fields: [user_id], references: [id])
  custom_data   Json?     // For additional RSVP form data

  @@unique([event_id, user_id])
}

model Booking {
  id            String    @id @default(cuid())
  userId        String
  user          User      @relation(fields: [userId], references: [id])
  eventId       String
  event         Event     @relation(fields: [eventId], references: [id])
  status        BookingStatus @default(PENDING)
  paymentStatus PaymentStatus @default(PENDING)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
}

model Notification {
  id            String    @id @default(cuid())
  userId        String
  user          User      @relation(fields: [userId], references: [id])
  title         String
  message       String
  isRead        Boolean   @default(false)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
}

enum Role {
  USER
  ADMIN
  ORGANIZER
}

enum Category {
  CONFERENCE
  WORKSHOP
  SEMINAR
  NETWORKING
  SOCIAL
  OTHER
}

enum EventStatus {
  DRAFT
  PUBLISHED
  CANCELLED
  COMPLETED
}

enum BookingStatus {
  PENDING
  CONFIRMED
  CANCELLED
  REFUNDED
}

enum PaymentStatus {
  PENDING
  COMPLETED
  FAILED
  REFUNDED
}
